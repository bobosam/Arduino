// =================================================
// FOLLOW THE LIGHT
// ARDUINO GAME PROJECT
// =================================================
// TONES  ==========================================
// Start by defining the relationship between 
//       note, period, &  frequency. 
#define  c     3830    // 261 Hz 
#define  d     3400    // 294 Hz 
#define  e     3038    // 329 Hz 
#define  f     2864    // 349 Hz 
#define  g     2550    // 392 Hz 
#define  a     2272    // 440 Hz 
#define  b     2028    // 493 Hz 
#define  C     1912    // 523 Hz 
// Define a special note, 'R', to represent a rest
#define  R     0

int pinDiodL1 = 12;
int pinDiodL2 = 11;
int pinDiodL3 = 10;

int pinButtonS1 = A0;
int pinButtonS2 = A1;
int pinButtonS3 = A2;

int speakerOut = 7;

int stateButtonS1;
int stateButtonS2;
int stateButtonS3;

int randNUmber;
int startTimer = 1000;
int stepTimer = 10;
bool check = false;
int counter = 0;
bool gameState = false;

int melody[] = {  C,  b,  g,  C,  b,   e,  R};
int beats[]  = { 16, 16, 16,  8,  8,  16, 32 }; 
int MAX_COUNT = sizeof(melody) / 2;
long tempo = 10000;
int pause = 1000;
int rest_count = 100;
int tone_ = 0;
int beat = 0;
long duration  = 0;

void setup() {
	// put your setup code here, to run once:
	pinMode(pinDiodL1, OUTPUT);  
	pinMode(pinDiodL2, OUTPUT);
	pinMode(pinDiodL3, OUTPUT);
  
	pinMode(speakerOut, OUTPUT);
    
	pinMode(pinButtonS1,INPUT);
	pinMode(pinButtonS2,INPUT);
	pinMode(pinButtonS3,INPUT);

	randomSeed(analogRead(0));

	Serial.begin(9600);
}

void loop() {
	// put your main code here, to run repeatedly:
	digitalWrite(pinDiodL1,LOW);
	digitalWrite(pinDiodL2,LOW);
	digitalWrite(pinDiodL3,LOW);
	digitalWrite(speakerOut,LOW);
    
	while(!gameState){
		stateButtonS1 = digitalRead(pinButtonS1);
		stateButtonS2 = digitalRead(pinButtonS2);
		stateButtonS3 = digitalRead(pinButtonS3);

		if(stateButtonS1 == HIGH && stateButtonS2 == HIGH && stateButtonS3 == HIGH){
			gameState = true;
			digitalWrite(pinDiodL1,HIGH);
			digitalWrite(pinDiodL2,HIGH);
			digitalWrite(pinDiodL3,HIGH);
        }
    }
    
    int timer = startTimer;
    int counter = 0;

    gameState = false;

    delay(3000);

    digitalWrite(pinDiodL1,LOW);
    digitalWrite(pinDiodL2,LOW);
    digitalWrite(pinDiodL3,LOW);
    digitalWrite(speakerOut,HIGH);
    
    delay(1000);
    
    digitalWrite(speakerOut,LOW);
    
	do{
		check = false;
		randNUmber = random(pinDiodL3, pinDiodL1 + 1);
		digitalWrite(randNUmber,HIGH);

		delay(timer);
    
		stateButtonS1 = digitalRead(pinButtonS1);
		stateButtonS2 = digitalRead(pinButtonS2);
		stateButtonS3 = digitalRead(pinButtonS3);
      
		if(randNUmber == pinDiodL3 && stateButtonS1 == HIGH &&
			stateButtonS2 == LOW && stateButtonS3 == LOW){
			  check = true;
		  }

		if(randNUmber == pinDiodL2 && stateButtonS1 == LOW &&
		  stateButtonS2 == HIGH && stateButtonS3 == LOW){
			  check = true;
		  }

      
		if(randNUmber == pinDiodL1 && stateButtonS1 == LOW &&
		  stateButtonS2 == LOW && stateButtonS3 == HIGH){
			  check = true;
		  }

		digitalWrite(pinDiodL1,LOW);
		digitalWrite(pinDiodL2,LOW);
		digitalWrite(pinDiodL3,LOW);
		digitalWrite(speakerOut,LOW);

		timer -= stepTimer;

		if(timer < 0){
		  timer = 0;
		}

		counter++;

	}while(check);

	digitalWrite(pinDiodL1,HIGH);
	digitalWrite(pinDiodL2,HIGH);
	digitalWrite(pinDiodL3,HIGH);
  
	playFinish();
   
	Serial.println(counter - 1);
}

void playFinish(){
	// Set up a counter to pull from melody[] and beats[]
	for (int i=0; i<MAX_COUNT; i++) {
	tone_ = melody[i];
	beat = beats[i];

	duration = beat * tempo; // Set up timing

	playTone(); 
	// A pause between notes...
	delayMicroseconds(pause);
	}
}

void playTone() {
	long elapsed_time = 0;
	if (tone_ > 0) { // if this isn't a Rest beat, while the tone has 
		//  played less long than 'duration', pulse speaker HIGH and LOW
		while (elapsed_time < duration) {
			digitalWrite(speakerOut,HIGH);
			delayMicroseconds(tone_ / 2);

			// DOWN
			digitalWrite(speakerOut, LOW);
			delayMicroseconds(tone_ / 2);

			// Keep track of how long we pulsed
			elapsed_time += (tone_);
		} 
	} else {
		 // Rest beat; loop times delay
		for (int j = 0; j < rest_count; j++) { // See NOTE on rest_count
		  delayMicroseconds(duration);  
		}                                
	}                                 
}

